// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  first_name    String
  middle_name   String?
  last_name     String
  password      String
  emailVerified DateTime?
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Session       Session[]
  Authenticator Authenticator[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  Authenticator Authenticator[]

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?

  @@id([userId, credentialID])
  @@map("authenticators")
}

model InvoiceHistory {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  details   Json
  createdAt DateTime @default(now())

  @@map("invoice_historys")
}
